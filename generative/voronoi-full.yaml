import: random.yaml
styles:
    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of functions about random.

                For more information on this theme read [this chapter of The Book
                of Shaders about Random](http://thebookofshaders.com/10/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "vec3 random3 (vec2 p) {\n    #ifdef RANDOM_TEXSAMPLE\n  \
                    \  return texture2D(u_random,fract(p*2.),-100.).rgb;\n    #else\n\
                    \    return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)),\
                    \ dot(p,vec2(419.2,371.9)) ))*43758.5453); \n    #endif\n}\nvec3\
                    \ random3 (vec3 p) {\n    #ifdef RANDOM_TEXSAMPLE\n    vec2 uv\
                    \ = fract(p.xy+vec2(37.0,17.0)*p.z);\n    return texture2D(u_random,\
                    \ fract(uv*2.), -100.0).rgb;\n    #else\n    float j = 4096.0*sin(dot(p,vec3(17.0,\
                    \ 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n   \
                    \ j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y\
                    \ = fract(512.0*j);\n    return r-0.5;\n    #endif\n}\nvec2 random2\
                    \ (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n    return random3(p).rg;\n\
                    \    #else\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\
                    \ \n    #endif\n}\nfloat random (float x) { \n    return fract(sin(x)*43758.5453);\n\
                    }\nfloat random (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n   \
                    \ return random3(p).r;\n    #else\n    return fract(1e4 * sin(17.0\
                    \ * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n\
                    \    #endif\n}\nfloat random (vec3 p) { \n    #ifdef RANDOM_TEXSAMPLE\n\
                    \    return random3(p).r;\n    #else\n    return fract(sin(dot(p.xyz,\
                    \ vec3(70.9898,78.233,32.4355)))* 43758.5453123); \n    #endif\n\
                    }"
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
        test:
            random2_vec2:
                blocks:
                    color: '    color.rg += random2(v_texcoord.xy*2.);'
            random2_vec2_t:
                blocks:
                    color: '    color.rg += random2(v_texcoord.xy*2.);'
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec2:
                blocks:
                    color: '    color.rgb += random3(v_texcoord.xy*2.);'
            random3_vec2_t:
                blocks:
                    color: '    color.rgb += random3(v_texcoord.xy*2.);'
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec3:
                blocks:
                    color: '    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));'
            random3_vec3_t:
                blocks:
                    color: '    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));'
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_float:
                blocks:
                    color: '    color.rgb += random(v_texcoord.x*2.);'
            random_float_t:
                blocks:
                    color: '    color.rgb += random(v_texcoord.x*2.);'
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec2:
                blocks:
                    color: '    color.rgb += random(v_texcoord.xy*2.);'
            random_vec2_t:
                blocks:
                    color: '    color.rgb += random(v_texcoord.xy*2.);'
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec3:
                blocks:
                    color: '    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));'
            random_vec3_t:
                blocks:
                    color: '    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));'
                defines:
                    RANDOM_TEXSAMPLE: 1
    generative-voronoi:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of Voronoi functions.

                For more information on this theme read [this chapter of The Book
                of Shaders about Cellular Noise and Voronoi](http://thebookofshaders.com/12/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: generative-random
        shaders:
            blocks:
                global: "vec3 voronoi (vec2 st) {\n    vec2 ipos = floor(st);\n  \
                    \  vec2 fpos = fract(st);\n    vec3 m = vec3( 8.0 );\n    for(\
                    \ int j=-1; j<=1; j++ ){\n        for( int i=-1; i<=1; i++ ){\n\
                    \            vec2  g = vec2( float(i), float(j) );\n         \
                    \   vec2  o = random2( ipos + g );\n            vec2  r = g -\
                    \ fpos + o;\n            float d = dot( r, r );\n            if(\
                    \ d<m.x )\n                m = vec3( d, o );\n        }\n    }\n\
                    \    return m;\n}"
        test:
            voronoi:
                blocks:
                    color: color.rgb = voronoi(v_texcoord*2.);
