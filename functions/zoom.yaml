import:
    - ./easing.yaml

styles:
    functions-zoom:
        oc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                How it works?
                Well, you add it like any other block, by `import`ing it and then `mix`ing it to the style.
                Then you set the zooms wher should **start** and **end** the interpolation, setting the `defines`: `ZOOM_START` and `ZOOM_END`.
                Then you use the `zoom()` function... by default this function gives a number between 0 and 1. But you can change it to interpolate any thing (`floats`, `vec2`, `vec3`, `vec4` and even other functions). For that you Just need to change de `defines`: `ZOOM_IN`, and `ZOOM_OUT`.
                Another thing that can be change is the type of interpolation, de default is `linear`, but can be any of the [easing functions](#functions-easing). For it you need to change the s`define` of this block like this: `ZOOM: quadraticInOut`
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN, 
                                    ZOOM_OUT, 
                                    ZOOM_FNC( clamp( smoothstep(ZOOM_START/ZOOM_MAX, 
                                                                ZOOM_END/ZOOM_MAX, 
                                                                max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) ) );
                    }