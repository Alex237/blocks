import:
- random.yaml
styles:
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    filter-grain:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a lens grain effect to the scene.

                '
            examples:
                grain:
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain.png
                    lines: 29
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - block
        - generative-fbm
        shaders:
            blocks:
                filter: '// Apply the grain in the amount defined on GRAIN_AMOUNT

                    color.rgb = color.rgb GRAIN_BLEND (grain()*GRAIN_AMOUNT);

                    '
                global: "#ifdef TANGRAM_FRAGMENT_SHADER\nfloat grain () {\n    vec2\
                    \ pos = gl_FragCoord.xy;\n    vec2 st = pos/u_resolution.xy-vec2(.5);\n\
                    \    return dot(st,st)+(fbm(pos*0.6)*0.1);\n}\n#endif\n"
            defines:
                GRAIN_AMOUNT: 0.3
                GRAIN_BLEND: SUBTRACT
        ui:
            shaders:
                defines:
                    GRAIN_AMOUNT:
                        label: Amount
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
                    GRAIN_BLEND:
                        label: Blend mode
                        type: dropdownArray
                        values:
                        - ADD
                        - SUBTRACT
                        - MULTIPLY
    generative-fbm:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of Fractal Brownian Motion functions.

                For more information on this theme read [this chapter of The Book
                of Shaders about fractal Brownian Motion](http://thebookofshaders.com/13/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: generative-noise
        shaders:
            blocks:
                global: "// Fractional Brownian motion for 1, 2 and 3 dimensions\n\
                    float fbm (in float x) {\n    float v = 0.0;\n    float a = 0.5;\n\
                    \    float shift = float(100.0);\n    for (int i = 0; i < int(NUM_OCTAVES);\
                    \ ++i) {\n        v += a * noise(x);\n        x = x * 2.0 + shift;\n\
                    \        a *= 0.5;\n    }\n    return v;\n}\nfloat fbm (in vec2\
                    \ xy) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift\
                    \ = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5), \n \
                    \                   -sin(0.5), cos(0.50));\n    for (int i = 0;\
                    \ i < int(NUM_OCTAVES); ++i) {\n        v += a * noise(xy);\n\
                    \        xy = rot * xy * 2.0 + shift;\n        a *= 0.5;\n   \
                    \ }\n    return v;\n}\nfloat fbm (in vec3 xyz) {\n    float v\
                    \ = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100.0);\n\
                    \    for (int i = 0; i < int(NUM_OCTAVES); ++i) {\n        v +=\
                    \ a * noise(xyz);\n        xyz = xyz * 2.0 + shift;\n        a\
                    \ *= 0.5;\n    }\n    return v;\n}"
            defines:
                NUM_OCTAVES: 5
        test:
            fbm_float_3oct:
                blocks:
                    color: color += fbm(v_texcoord.x);
                defines:
                    NUM_OCTAVES: 3
            fbm_float_5oct:
                blocks:
                    color: color += fbm(v_texcoord.x);
            fbm_float_8oct:
                blocks:
                    color: color += fbm(v_texcoord.x);
                defines:
                    NUM_OCTAVES: 8
            fbm_vec2_3oct:
                blocks:
                    color: color += fbm(v_texcoord);
                defines:
                    NUM_OCTAVES: 3
            fbm_vec2_5oct:
                blocks:
                    color: color += fbm(v_texcoord);
            fbm_vec2_8oct:
                blocks:
                    color: color += fbm(v_texcoord);
                defines:
                    NUM_OCTAVES: 8
            fbm_vec3_3oct:
                blocks:
                    color: color += fbm(vec3(v_texcoord,u_time));
                defines:
                    NUM_OCTAVES: 3
            fbm_vec3_5oct:
                blocks:
                    color: color += fbm(vec3(v_texcoord,u_time));
            fbm_vec3_8oct:
                blocks:
                    color: color += fbm(vec3(v_texcoord,u_time));
                defines:
                    NUM_OCTAVES: 8
    generative-noise:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of Noise functions.

                For more information on this theme read [this chapter of The Book
                of Shaders about Noise](http://thebookofshaders.com/11/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: generative-random
        shaders:
            blocks:
                global: "// 1D Value Noise for 1, 2 and 3 dimentions\n// ================================\n\
                    float noise (in float x) {\n    float i = floor(x);\n    float\
                    \ f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    #ifdef\
                    \ NOISE_TEXSAMPLE\n    return texture2D(u_random, vec2(fract((x+.5)/NOISE_TEXSAMPLE_SIZE),.5),\
                    \ -100.).r;\n    #else\n    return mix(random(i), random(i + 1.0),\
                    \ f);\n    #endif\n}\n\nfloat noise (vec2 p) {\n    vec2 i = floor(p);\n\
                    \    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n  \
                    \  #ifdef NOISE_TEXSAMPLE\n    return texture2D(u_random, fract((p+.5)/NOISE_TEXSAMPLE_SIZE),\
                    \ -100.).r;\n    #else\n    float a = random(i);\n    float b\
                    \ = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0,\
                    \ 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    return\
                    \ mix(a, b, f.x) + (c - a) * f.y * (1.0 - f.x) + (d - b) * f.x\
                    \ * f.y;\n    #endif\n}\n\nfloat noise (vec3 p) {\n    vec3 i\
                    \ = floor(p);\n    vec3 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n\
                    \    #ifdef NOISE_TEXSAMPLE\n    vec2 uv = (i.xy+vec2(37.0,17.0)*i.z)\
                    \ + f.xy;\n    vec2 rg = texture2D(u_random, fract((uv+.5)/NOISE_TEXSAMPLE_SIZE),\
                    \ -100.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n    #else\n\
                    \    const vec3 step = vec3(110.0, 241.0, 171.0);\n    float n\
                    \ = dot(i, step);\n    return mix( mix(mix(random(n + dot(step,\
                    \ vec3(0,0,0))),\n                        random(n + dot(step,\
                    \ vec3(1,0,0))), f.x),\n                    mix(random(n + dot(step,\
                    \ vec3(0,1,0))),\n                        random(n + dot(step,\
                    \ vec3(1,1,0))), f.x),\n                    f.y),\n          \
                    \      mix(mix(random(n + dot(step, vec3(0,0,1))),\n         \
                    \               random(n + dot(step, vec3(1,0,1))), f.x),\n  \
                    \                  mix(random(n + dot(step, vec3(0,1,1))),\n \
                    \                       random(n + dot(step, vec3(1,1,1))), f.x),\n\
                    \                f.y),\n            f.z);\n    #endif\n}\n\n//\
                    \ Description : GLSL 2D simplex noise function\n//      Author\
                    \ : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod\
                    \ : 20110822 (ijm)\n//     License : \n//  Copyright (C) 2011\
                    \ Ashima Arts. All rights reserved.\n//  Distributed under the\
                    \ MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n\
                    vec3 mod289(vec3 x) { \n    return x - floor(x * (1.0 / 289.0))\
                    \ * 289.0; \n}\nvec2 mod289(vec2 x) { \n    return x - floor(x\
                    \ * (1.0 / 289.0)) * 289.0; \n}\nvec3 permute(vec3 x) { \n   \
                    \ return mod289(((x*34.0)+1.0)*x); \n}\nfloat snoise(vec2 v) {\n\
                    \n    // Precompute values for skewed triangular grid\n    const\
                    \ vec4 C = vec4(0.211324865405187,\n                        //\
                    \ (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\
                    \  \n                        // 0.5*(sqrt(3.0)-1.0)\n        \
                    \                -0.577350269189626,  \n                     \
                    \   // -1.0 + 2.0 * C.x\n                        0.024390243902439);\
                    \ \n                        // 1.0 / 41.0\n\n    // First corner\
                    \ (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 =\
                    \ v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n\
                    \    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0,\
                    \ 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy\
                    \ + C.zz;\n\n    // Do some permutations to avoid\n    // truncation\
                    \ effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n\
                    \            permute( i.y + vec3(0.0, i1.y, 1.0))\n          \
                    \      + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5\
                    \ - vec3(\n                        dot(x0,x0), \n            \
                    \            dot(x1,x1), \n                        dot(x2,x2)\n\
                    \                        ), 0.0);\n\n    m = m*m ;\n    m = m*m\
                    \ ;\n\n    // Gradients: \n    //  41 pts uniformly over a line,\
                    \ mapped onto a diamond\n    //  The ring size 17*17 = 289 is\
                    \ close to a multiple \n    //      of 41 (41*7 = 287)\n\n   \
                    \ vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x)\
                    \ - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\
                    \n    // Normalise gradients implicitly by scaling m\n    // Approximation\
                    \ of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159\
                    \ - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise\
                    \ value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x\
                    \  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz *\
                    \ vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n\n//\n\
                    // Simplex Noise\n//\nconst float F3 =  0.3333333;\nconst float\
                    \ G3 =  0.1666667;\nfloat snoise (vec3 p) {\n    vec3 s = floor(p\
                    \ + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\
                    \    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0\
                    \ - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    vec3 x1\
                    \ = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3\
                    \ = x - 1.0 + 3.0*G3;\n    vec4 w, d;\n    w.x = dot(x, x);\n\
                    \    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3,\
                    \ x3);\n    w = max(0.6 - w, 0.0);\n    d.x = dot(random3(s),\
                    \ x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s\
                    \ + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    w *=\
                    \ w;\n    w *= w;\n    d *= w;\n    return dot(d, vec4(52.0));\n\
                    }"
            defines:
                NOISE_TEXSAMPLE_SIZE: 256.0
        test:
            noise_float:
                blocks:
                    color: color += noise(v_texcoord.x*2.);
            noise_float_t:
                blocks:
                    color: color += noise(v_texcoord.x*2.);
                defines:
                    NOISE_TEXSAMPLE: 1
            noise_vec2:
                blocks:
                    color: color += noise(v_texcoord.xy*2.);
            noise_vec2_t:
                blocks:
                    color: color += noise(v_texcoord.xy*2.);
                defines:
                    NOISE_TEXSAMPLE: 1
            noise_vec3:
                blocks:
                    color: color += noise(vec3(v_texcoord.xy,u_time)*2.);
            noise_vec3_t:
                blocks:
                    color: color += noise(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    NOISE_TEXSAMPLE: 1
            snoise_vec2:
                blocks:
                    color: color += snoise(v_texcoord.xy*2.);
            snoise_vec2_t:
                blocks:
                    color: color += snoise(v_texcoord.xy*2.);
                defines:
                    NOISE_TEXSAMPLE: 1
            snoise_vec3:
                blocks:
                    color: color += snoise(vec3(v_texcoord.xy,u_time)*2.);
            snoise_vec3_t:
                blocks:
                    color: color += snoise(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    NOISE_TEXSAMPLE: 1
    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of functions about random.

                For more information on this theme read [this chapter of The Book
                of Shaders about Random](http://thebookofshaders.com/10/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "vec3 random3 (vec2 p) {\n    #ifdef RANDOM_TEXSAMPLE\n  \
                    \  return texture2D(u_random,fract(p*2.),-100.).rgb;\n    #else\n\
                    \    return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)),\
                    \ dot(p,vec2(419.2,371.9)) ))*43758.5453); \n    #endif\n}\nvec3\
                    \ random3 (vec3 p) {\n    #ifdef RANDOM_TEXSAMPLE\n    vec2 uv\
                    \ = fract(p.xy+vec2(37.0,17.0)*p.z);\n    return texture2D(u_random,\
                    \ fract(uv*2.), -100.0).rgb;\n    #else\n    float j = 4096.0*sin(dot(p,vec3(17.0,\
                    \ 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n   \
                    \ j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y\
                    \ = fract(512.0*j);\n    return r-0.5;\n    #endif\n}\nvec2 random2\
                    \ (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n    return random3(p).rg;\n\
                    \    #else\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\
                    \ \n    #endif\n}\nfloat random (float x) { \n    return fract(sin(x)*43758.5453);\n\
                    }\nfloat random (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n   \
                    \ return random3(p).r;\n    #else\n    return fract(1e4 * sin(17.0\
                    \ * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n\
                    \    #endif\n}\nfloat random (vec3 p) { \n    #ifdef RANDOM_TEXSAMPLE\n\
                    \    return random3(p).r;\n    #else\n    return fract(sin(dot(p.xyz,\
                    \ vec3(70.9898,78.233,32.4355)))* 43758.5453123); \n    #endif\n\
                    }"
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
        test:
            random2_vec2:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
            random2_vec2_t:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec2:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
            random3_vec2_t:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec3:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
            random3_vec3_t:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_float:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
            random_float_t:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec2:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
            random_vec2_t:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec3:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
            random_vec3_t:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
