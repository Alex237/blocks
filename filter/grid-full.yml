import:
- ../space/tile.yaml
styles:
    filter-grid:
        doc:
            description: 'Apply a grid filter to they syle

                <p>The amount can be set by the GRID_AMOUNT define [0.0~1.0]</p>

                <p>Then you should choose between the modes: ```GRID_ADD```, ```GRID_SUBSTRACT```
                and ```GRID_MULTIPLY```</p>

                '
        mix:
        - patterns-grid
        shaders:
            blocks:
                filter: '#ifdef GRID_ADD

                    color.rgb += tileGrid()*GRID_AMOUNT;

                    #endif

                    #ifdef GRID_SUBSTRACT

                    color.rgb -= tileGrid()*GRID_AMOUNT;

                    #endif

                    #ifdef GRID_MULTIPLY

                    color.rgb *= tileGrid()*GRID_AMOUNT;

                    #endif

                    '
            defines:
                GRID_ADD: true
                GRID_AMOUNT: 0.2
                GRID_MULTIPLY: false
                GRID_SUBSTRACT: false
    patterns-grid:
        mix:
        - space-tile
        shaders:
            blocks:
                global: "// Draw a grid in the space a specific resolution and pressition\n\
                    bool grid (vec2 st, float res, float press) {\n    vec2 grid =\
                    \ fract(st*res);\n    return grid.x < res*press || grid.y < res*press;\n\
                    }\n//\n// Draw a grid in the space a specific resolution\nbool\
                    \ grid (vec2 st, float res) {\n    return grid(st, res, 1.0);\n\
                    }\n\n// Draw a grid using tile coordenates in a specific resolution\n\
                    float tileGrid (float res) {\n    vec2 st = getTileCoords()*100.*res;\n\
                    \    float pct = 0.0;\n    float press = 0.4+(1.0-fract(u_map_position.z))*0.1;\n\
                    \    if (grid(st,0.01,press)) pct += 0.5;\n    if (grid(st,0.1,press))\
                    \ pct += 0.1;\n    return pct;\n}\n\n// Draw two grid that smoothly\
                    \ interpolates acording to zooms\nfloat tileGrid() { \n    return\
                    \ mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); \n}"
    space-tile:
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    varying vec3 v_pos;\n//\n// Get the coordinates in tile space\n\
                    // ================================\nvec2 getTileCoords() {\n\
                    \    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
