import: ../functions/aastep.yaml
styles:
    functions-aastep:
        doc:
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    patterns-dots:
        mix:
        - space-tile
        - tiling-brick
        - shapes-circle
        shaders:
            blocks:
                global: "// Interpolated dot patern between zooms attached to tile\
                    \ coords\nfloat TileDots(float scale, float size) {\n    // Beginning\
                    \ of the transition\n    vec2 IN = brick(getTileCoords()*scale,2.);\n\
                    \    float A = circleDF(vec2(0.5)-IN)*1.8;\n    //\n    // If\
                    \ over 18. add an end B to transition with\n    float d = 0.0;\n\
                    \    if (u_map_position.z < 18.) {\n        vec2 OUT = fract(getTileCoords()*scale*2.);\n\
                    \        float B = circleDF(vec2(0.25)-OUT)*5.;\n        B = min(B,\
                    \ circleDF(vec2(0.75,0.25)-OUT)*5.);\n        B = min(B, circleDF(vec2(0.5,0.75)-OUT)*5.);\n\
                    \        B = min(B, circleDF(vec2(0.,0.75)-OUT)*5.);\n       \
                    \ B = min(B, circleDF(vec2(1.,0.75)-OUT)*5.);\n        d = mix(A,\
                    \ B, pow(fract(u_map_position.z),10.));\n    } else {\n      \
                    \  d = A;\n    }\n    //\n    // Use the antialias step to make\
                    \ a shape from the DF\n    return aastep(size,d);;\n}"
    shapes-circle:
        mix: functions-aastep
        shaders:
            blocks:
                global: "// get distance field of a Circle\n// ================================\n\
                    float circleDF (vec2 st) {\n    return dot(st,st);\n}\n//\n//\
                    \ Draw a circle in the middle of the ST space\n// ================================\n\
                    float circle (vec2 st, float radius) {\n    return 1.-aastep(radius,\
                    \ circleDF(st-vec2(0.5))*PI);\n}"
            defines:
                PI: 3.141592653589793
    space-tile:
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    varying vec3 v_pos;\n//\n// Get the coordinates in tile space\n\
                    // ================================\nvec2 getTileCoords() {\n\
                    \    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
    tiling-brick:
        shaders:
            blocks:
                global: "// Repeats a coordinate space (st) in diferent brick-like\
                    \ tiles\n// ================================\nvec2 brick (vec2\
                    \ st, float zoom) {\n    st *= zoom;\n    // Here is where the\
                    \ offset is happening\n    st.x += step(1., mod(st.y,2.0)) * 0.5;\n\
                    \    return fract(st);\n}"
