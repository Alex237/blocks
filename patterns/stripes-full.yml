import: ../functions/aastep.yaml
styles:
    functions-aastep:
        doc:
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    patterns-stripes:
        mix: functions-aastep
        shaders:
            blocks:
                global: "// Return a distance function of stripes\nfloat stripesDF\
                    \ (vec2 st) {\n    return abs(sin(st.y*PI));\n}\n\n// Adjustable\
                    \ width stripes\nfloat stripes (vec2 st, float width) {\n    return\
                    \ aastep(width,stripesDF(st));\n}\n\n// Faster optimisation of\
                    \ diagonal stripes\nfloat diagonalStripes (vec2 st) {\n    vec2\
                    \ i_st = floor(st);\n    vec2 f_st = fract(st);\n    if (mod(i_st.y,2.)\
                    \ - mod(i_st.x,2.) == 0.) {\n        return 1.0 - aastep(f_st.x,f_st.y);\n\
                    \    } else {\n        return aastep(f_st.x,f_st.y);\n    }\n}"
            defines:
                PI: 3.141592653589793
