import: rect.yaml
styles:
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: "// Draw a Cross in the middle of the ST space\nfloat cross\
                    \ (vec2 st, float size, float width) {\n    return  clamp(  rect(st,\
                    \ vec2(size*0.5,width*0.125)) +\n                    rect(st,\
                    \ vec2(width*0.125,size*0.5)),0.,1.);\n}\nfloat cross (in vec2\
                    \ st, float _size) {\n    return  rect(st, vec2(_size*0.5,_size*0.125))\
                    \ +\n            rect(st, vec2(_size*0.125,_size*0.5));\n}\nfloat\
                    \ cross (in vec2 st, vec2 _size) {\n    return  rect(st, vec2(_size.x*0.5,_size.y*0.125))\
                    \ +\n            rect(st, vec2(_size.y*0.125,_size.x*0.5));\n}"
    shapes-rect:
        shaders:
            blocks:
                global: "// get distance field of a rectangle in the center\n// ================================\n\
                    float rectDF (vec2 st, vec2 size) {\n    //float aspect = u_resolution.x/u_resolution.y;\n\
                    \    st = st*2.-1.;\n    //st.x *= aspect;\n    return length(max(abs(st)-size,.0));\n\
                    }\nfloat rectDF (vec2 st, float size) {\n    //float aspect =\
                    \ u_resolution.x/u_resolution.y;\n    st = st*2.-1.;\n    //st.x\
                    \ *= aspect;\n    return length(max(abs(st)-size,.0));\n}\n\n\
                    // Draw a round corners rectangle in the center\n// ================================\n\
                    float rect (vec2 st, vec2 size, float radio) {\n    radio = max(.000001,\
                    \ radio);\n    return 1.0-step(radio, rectDF(st, size-radio));\n\
                    }\n\nfloat rect (vec2 st, float size, float radio) {\n    return\
                    \ rect(st,vec2(size),radio);\n}\n\n// Draw a rectangle in the\
                    \ center\n// ================================\nfloat rect (vec2\
                    \ st, vec2 size){\n    size = .25-size*.125;\n    vec2 uv = step(size,st*(1.0-st));\n\
                    \    return (uv.x*uv.y);\n}\n\nfloat rect (vec2 st, float size){\n\
                    \    return rect(st,vec2(size));\n}\n"
