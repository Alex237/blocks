styles:
    tiling-simplex:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent simplex tiles. To learn more about simplex grids check [this chapter about noise from the Book of Shaders](https://thebookofshaders.com/11/)
        shaders:
            blocks:
                global: |
                    // 
                    // ================================
                    vec2 simplex (vec2 st) {
                        vec2 r = vec2(0.0);
                        r.x = 1.1547*st.x;
                        r.y = st.y+0.5*r.x;
                        return r;
                    }
                    vec2 unsimplex (vec2 st) {
                        vec2 r;
                        r.y=st.y-0.5*st.x;
                        r.x=st.x/1.1547;
                        return r;
                    }
                    
                    vec3 simplexGrid (vec2 st) {
                        vec3 xyz = vec3(0.0);
                        
                        vec2 p = fract(simplex(st));
                        if (p.x > p.y) {
                            xyz.xy = 1.0-vec2(p.x,p.y-p.x);
                            xyz.z = p.y;
                        } else {
                            xyz.yz = 1.0-vec2(p.x-p.y,p.y);
                            xyz.x = p.x;
                        }
                        
                        return fract(xyz);
                    }
                    
                    vec3 simplexRotatedGrid (vec2 st) {
                        vec3 xyz = vec3(0.0);
                        
                        vec2 p = fract(simplex(st));
                        if (p.x > p.y) {
                            xyz.xy = 1.-vec2(p.x,p.y-p.x);
                            xyz.z = p.y;
                        } else {
                            xyz.zx = 1.-vec2(p.x-p.y,p.y);
                            xyz.y = p.x;
                        }
                        
                        return fract(xyz);
                    }