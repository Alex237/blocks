import:
- ../geometry/normal.yaml
- ../generative/random.yaml
styles:
    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of functions about random.

                For more information on this theme read [this chapter of The Book
                of Shaders about Random](http://thebookofshaders.com/10/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "vec3 random3 (vec2 p) {\n    #ifdef RANDOM_TEXSAMPLE\n  \
                    \  return texture2D(u_random,fract(p*2.),-100.).rgb;\n    #else\n\
                    \    return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)),\
                    \ dot(p,vec2(419.2,371.9)) ))*43758.5453); \n    #endif\n}\nvec3\
                    \ random3 (vec3 p) {\n    #ifdef RANDOM_TEXSAMPLE\n    vec2 uv\
                    \ = fract(p.xy+vec2(37.0,17.0)*p.z);\n    return texture2D(u_random,\
                    \ fract(uv*2.), -100.0).rgb;\n    #else\n    float j = 4096.0*sin(dot(p,vec3(17.0,\
                    \ 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n   \
                    \ j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y\
                    \ = fract(512.0*j);\n    return r-0.5;\n    #endif\n}\nvec2 random2\
                    \ (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n    return random3(p).rg;\n\
                    \    #else\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\
                    \ \n    #endif\n}\nfloat random (float x) { \n    return fract(sin(x)*43758.5453);\n\
                    }\nfloat random (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n   \
                    \ return random3(p).r;\n    #else\n    return fract(1e4 * sin(17.0\
                    \ * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n\
                    \    #endif\n}\nfloat random (vec3 p) { \n    #ifdef RANDOM_TEXSAMPLE\n\
                    \    return random3(p).r;\n    #else\n    return fract(sin(dot(p.xyz,\
                    \ vec3(70.9898,78.233,32.4355)))* 43758.5453123); \n    #endif\n\
                    }"
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
        test:
            random2_vec2:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
            random2_vec2_t:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec2:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
            random3_vec2_t:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec3:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
            random3_vec3_t:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_float:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
            random_float_t:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec2:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
            random_vec2_t:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec3:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
            random_vec3_t:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
    geometry-normal:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Functions to detect if the surface is a wall (`bool isWall()`)
                or a roof (''bool isRoof()'') based on the normals

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "#ifdef TANGRAM_FRAGMENT_SHADER\n// Ask to the geometry normals\
                    \ if this surface is a Wall\nbool isWall () {\n    return dot(vec3(0.,\
                    \ 0., 1.), worldNormal()) < 1.0 - TANGRAM_EPSILON;\n}\n//\n//\
                    \ Ask to the geometry normals if this surface is a roof\nbool\
                    \ isRoof () {\n    return !isWall();\n}\n#endif"
    polygons-windows:
        base: polygons
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a windows patterns on the walls of a geometry

                '
            examples:
                gotham:
                    img: https://tangrams.github.io/tangram-sandbox/styles/gotham.png
                    lines: 128
                    url: https://tangrams.github.io/tangram-sandbox/styles/gotham.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        material:
            emission: 0.0
            shininess: 1.0
            specular: 0.0
        mix:
        - geometry-normal
        - generative-random
        shaders:
            blocks:
                color: "color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));\n\
                    float t = 0.5;\nif (isWall()) {\n    vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);\n\
                    \    vec2 ipos = floor(st);\n    vec2 fpos = fract(st);\n    if\
                    \ ( step(0.6,fpos.x)*step(0.4,fpos.y) > 0.0 ){\n        material.specular\
                    \ = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );\n\
                    \        material.emission = vec4(0.988,0.983,0.880,1.0) * step(.5,random(ipos+floor(worldNormal().xy*10.0)+t));\n\
                    \    }\n}\n"
                filter: color.rgb += vec3(1.)* min( 1.-(worldPosition().z*.001 + .7)
                    , 0.5 );
        texcoords: true
