import: ../functions/aastep.yaml
styles:
    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    polygons-dots:
        base: polygons
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply dot patterns to a polygon. To learn more about patterns
                check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - space-tile
        - tiling-brick
        - tiling-tile
        - shapes-circle
        shaders:
            blocks:
                color: "color.rgb = mix(DOTS_BACKGROUND_COLOR, \n                DOTS_COLOR,\
                    \ \n                DOTS_TYPE( circleDF(vec2(0.5)- DOTS_TILE_STYLE(getTileCoords()*DOTS_SCALE,2.))*2.)\
                    \ );"
                global: "float fill (in float x) {\n    return 1.-aastep(DOTS_SIZE,\
                    \ x);\n}\nfloat stroke (in float x) {\n    return aastep(DOTS_SIZE,\
                    \ x+DOTS_STROKE) - aastep(DOTS_SIZE, x);\n}\n"
            defines:
                DOTS_BACKGROUND_COLOR: color.rgb
                DOTS_COLOR: color.rgb*.5
                DOTS_SCALE: 10.0
                DOTS_SIZE: 0.41
                DOTS_STROKE: 0.15
                DOTS_TILE_STYLE: brick
                DOTS_TYPE: fill
        ui:
            DOTS_BACKGROUND_COLOR:
                label: Background color
                type: color
            DOTS_COLOR:
                label: Color
                type: color
            DOTS_SCALE:
                label: Scale
                range:
                    max: 1000.0
                    min: 1.0
                    step: 1.0
                type: number
            DOTS_SIZE:
                label: Size
                range:
                    max: 1.0
                    min: 0.0
                    step: 0.01
                type: number
            DOTS_STROKE:
                label: Stroke
                range:
                    max: 1.0
                    min: 0.0
                    step: 0.01
                type: number
            DOTS_TILE_STYLE:
                label: Tile type
                type: dropdown
                values:
                - tile
                - brick
            DOTS_TYPE:
                label: Type
                type: dropdown
                values:
                - fill
                - stroke
    shapes-circle:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Collection of functions to draw circles. To learn more about
                how to make shapes on shaders go to From check [this chapter about
                shapes from the Book of Shaders](https://thebookofshaders.com/07/)

                '
            examples:
                lego:
                    img: https://tangrams.github.io/tangram-sandbox/styles/lego.png
                    lines: 109-110
                    url: https://tangrams.github.io/tangram-sandbox/styles/lego.yaml
                nursery:
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 146
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                patterns:
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 146
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: functions-aastep
        shaders:
            blocks:
                global: "// get distance field of a Circle\n// ================================\n\
                    float circleDF (vec2 st) {\n    return dot(st,st);\n}\n//\n//\
                    \ Draw a circle in the middle of the ST space\n// ================================\n\
                    float circle (vec2 st, float radius) {\n    return 1.-aastep(radius,\
                    \ circleDF(st-vec2(0.5))*PI);\n}"
            defines:
                PI: 3.141592653589793
    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Get the position on the tile

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    varying vec3 v_pos;\n//\n// Get the coordinates in tile space\n\
                    // ================================\nvec2 getTileCoords() {\n\
                    \    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
    tiling-brick:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Repeats a coordinate space (`vec2 st`) in diferent brick-like
                tiles N times (`float zoom`). For more information about tilling patterns
                read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)

                '
            examples:
                nursery:
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 99
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                patterns:
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 130
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "vec2 brick (vec2 st, float zoom) {\n    st *= zoom;\n   \
                    \ // Here is where the offset is happening\n    st.x += step(1.,\
                    \ mod(st.y,2.0)) * 0.5;\n    return fract(st);\n}"
    tiling-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Repeats a coordinate space (`vec2 st`) in diferent brick-like
                tiles N times (`float zoom`). For more information about tilling patterns
                read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Repeats a coordinate space (st) in diferent tiles\n//\
                    \ ================================\nvec2 tile (vec2 st, float\
                    \ zoom) {\n    st *= zoom;\n    return fract(st);\n}"
