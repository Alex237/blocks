import:
- ../generative/random.yaml
- ../space/tile.yaml
styles:
    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of functions about random.

                For more information on this theme read [this chapter of The Book
                of Shaders about Random](http://thebookofshaders.com/10/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "vec3 random3 (vec2 p) {\n    #ifdef RANDOM_TEXSAMPLE\n  \
                    \  return texture2D(u_random,fract(p*2.),-100.).rgb;\n    #else\n\
                    \    return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)),\
                    \ dot(p,vec2(419.2,371.9)) ))*43758.5453); \n    #endif\n}\nvec3\
                    \ random3 (vec3 p) {\n    #ifdef RANDOM_TEXSAMPLE\n    vec2 uv\
                    \ = fract(p.xy+vec2(37.0,17.0)*p.z);\n    return texture2D(u_random,\
                    \ fract(uv*2.), -100.0).rgb;\n    #else\n    float j = 4096.0*sin(dot(p,vec3(17.0,\
                    \ 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n   \
                    \ j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y\
                    \ = fract(512.0*j);\n    return r-0.5;\n    #endif\n}\nvec2 random2\
                    \ (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n    return random3(p).rg;\n\
                    \    #else\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\
                    \ \n    #endif\n}\nfloat random (float x) { \n    return fract(sin(x)*43758.5453);\n\
                    }\nfloat random (vec2 p) { \n    #ifdef RANDOM_TEXSAMPLE\n   \
                    \ return random3(p).r;\n    #else\n    return fract(1e4 * sin(17.0\
                    \ * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n\
                    \    #endif\n}\nfloat random (vec3 p) { \n    #ifdef RANDOM_TEXSAMPLE\n\
                    \    return random3(p).r;\n    #else\n    return fract(sin(dot(p.xyz,\
                    \ vec3(70.9898,78.233,32.4355)))* 43758.5453123); \n    #endif\n\
                    }"
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
        test:
            random2_vec2:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
            random2_vec2_t:
                blocks:
                    color: color.rg += random2(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec2:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
            random3_vec2_t:
                blocks:
                    color: color.rgb += random3(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random3_vec3:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
            random3_vec3_t:
                blocks:
                    color: color.rgb += random3(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_float:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
            random_float_t:
                blocks:
                    color: color.rgb += random(v_texcoord.x*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec2:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
            random_vec2_t:
                blocks:
                    color: color.rgb += random(v_texcoord.xy*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
            random_vec3:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
            random_vec3_t:
                blocks:
                    color: color.rgb += random(vec3(v_texcoord.xy,u_time)*2.);
                defines:
                    RANDOM_TEXSAMPLE: 1
    polygons-pixelate:
        base: polygons
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a random pixelated pattern to the polygon style. To
                learn more about patterns or random check [this chapter](https://thebookofshaders.com/09/)
                or  [this other chapter from the Book of Shaders](https://thebookofshaders.com/10/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - space-tile
        - generative-random
        shaders:
            blocks:
                color: "color.rgb = mix(PIXELATE_BACKGROUND_COLOR,\n             \
                    \   PIXELATE_COLOR,\n                random(floor(getTileCoords()*PIXELATE_SCALE)));"
            defines:
                PIXELATE_BACKGROUND_COLOR: color.rgb
                PIXELATE_COLOR: color.rgb*.5
                PIXELATE_SCALE: 40.0
        ui:
            shaders:
                defines:
                    PIXELATE_BACKGROUND_COLOR:
                        label: Background color
                        type: color
                    PIXELATE_COLOR:
                        label: Color
                        type: color
                    PIXELATE_SCALE:
                        label: Scale
                        range:
                            max: 1000.0
                            min: 1.0
                            step: 1.0
                        type: number
    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Get the position on the tile

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    varying vec3 v_pos;\n//\n// Get the coordinates in tile space\n\
                    // ================================\nvec2 getTileCoords() {\n\
                    \    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
